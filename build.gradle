
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'

repositories {
	mavenLocal()
	mavenCentral()
}

group = 'org.standardout'
version = '0.2-SNAPSHOT'

jar {
	// include license into jar
	into 'META-INF', {
		from 'LICENSE'
	}
}

dependencies {
	compile gradleApi()
	compile localGroovy()
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.11'
}

// package groovydoc into a jar file
task packageJavadoc(type: Jar, dependsOn: 'groovydoc') {
	from groovydoc.destinationDir
	classifier = 'javadoc'
}

// package source into a jar file
task packageSources(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

// define artifacts for upload
artifacts {
	archives jar
	archives packageJavadoc
	archives packageSources
}

def configurePom(def pom) {
	// ensure correct artifact ID
	pom.artifactId = 'gradle-include-plugin'
	
	// pom file details
	pom.project {
	   name 'gradle-include-plugin'
	   packaging 'jar'
	   description 'Parametrizable includes for Gradle build scripts'
	   url 'https://github.com/stempler/gradle-include-plugin'

	   scm {
		   url 'scm:git:https://github.com/stempler/gradle-include-plugin.git'
		   connection 'scm:git:https://github.com/stempler/gradle-include-plugin.git'
		   developerConnection 'scm:git:https://github.com/stempler/gradle-include-plugin.git'
	   }

	   licenses {
		   license {
			   name 'The Apache Software License, Version 2.0'
			   url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			   distribution 'repo'
		   }
	   }

	   developers {
		   developer {
			   id 'stempler'
			   name 'Simon Templer'
			   email 'simon@templer.cc'
		   }
	   }
   }
}

// configure local install
install {
	repositories.mavenInstaller {
		configurePom(pom)
	}
}

// sign all artifacts
signing {
	required { gradle.taskGraph.hasTask(uploadArchives) }
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			// sign artifacts before upload
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			
			// upload to sonatype OSS (release)
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
				authentication(userName: this.hasProperty('sonatypeUsername') ? sonatypeUsername : '',
					password: this.hasProperty('sonatypePassword') ? sonatypePassword : '')
			}
			
			configurePom(pom)
		}
	}
}
